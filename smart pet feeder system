#include <Servo.h>
// Ultrasonic Sensor for Food
#define TRIG_PIN 7
#define ECHO_PIN 8
// Ultrasonic Sensor for Water Bowl
#define TRIG_PIN_WATER 9
#define ECHO_PIN_WATER 10
// Servo Motors
Servo foodServo;
Servo discardServo;
// Water Pump Relay
#define WATER_PUMP_PIN 4
// Timing variables
unsigned long previousMillis = 0;
unsigned long interval = 28800000; // 8 hours in milliseconds
unsigned long foodDispenseTime = 0;
bool isFoodLeft = false;
// Ultrasonic Thresholds
#define FOOD_DISTANCE_THRESHOLD 5 // Distance in cm to detect food
#define WATER_DISTANCE_THRESHOLD 5 // Distance in cm to detect empty 
water bowl
void setup() {
 Serial.begin(9600)
 // Initialize Ultrasonic Sensors
 pinMode(TRIG_PIN, OUTPUT);
 pinMode(ECHO_PIN, INPUT);
 pinMode(TRIG_PIN_WATER, OUTPUT);
 pinMode(ECHO_PIN_WATER, INPUT);
// Initialize Servo Motors
 foodServo.attach(5); // Pin 5
 discardServo.attach(6); // Pin 6
// Initialize Water Pump
 pinMode(WATER_PUMP_PIN, OUTPUT);
 digitalWrite(WATER_PUMP_PIN, LOW);
// Initial food dispensing
 dispenseFood();
 checkAndFillWater();
 foodDispenseTime = millis();
 isFoodLeft = true;
}
void loop() {
 unsigned long currentMillis = millis();
// Check if it's time to dispense food
 if (currentMillis - previousMillis >= interval) {
 previousMillis = currentMillis;
 dispenseFood();
 checkAndFillWater();
 foodDispenseTime = millis();
 isFoodLeft = true;
 }
// Check food status
 if (isFoodLeft && currentMillis - foodDispenseTime > 600000) { // 
10 minutes
 if (getFoodDistance() < FOOD_DISTANCE_THRESHOLD) { // Check if 
food is left
 discardFood();
 }
isFoodLeft = false;
}
delay(1000);
}
void dispenseFood() {
 Serial.println("Dispensing food...");
 foodServo.write(90); // Rotate servo to dispense position
 delay(2000);
 foodServo.write(0); // Return to default position
}
void checkAndFillWater() {
 Serial.println("Checking water bowl...");
 if (getWaterDistance() > WATER_DISTANCE_THRESHOLD) { // Water 
bowl is empty
 Serial.println("Water bowl is empty. Filling water...");
 digitalWrite(WATER_PUMP_PIN, HIGH);
 delay(5000); // Run pump for 5 seconds
 digitalWrite(WATER_PUMP_PIN, LOW);
 } else {
 Serial.println("Water bowl is full.");
 }
}
void discardFood() {
 Serial.println("Discarding food...");
 discardServo.write(90); // Rotate servo to discard position
 delay(2000);
 discardServo.write(0); // Return to default position
}
float getFoodDistance() {
 digitalWrite(TRIG_PIN, LOW);
 delayMicroseconds(2);
digitalWrite(TRIG_PIN, HIGH);
 delayMicroseconds(10);
 digitalWrite(TRIG_PIN, LOW);
long duration = pulseIn(ECHO_PIN, HIGH);
 float distance = (duration * 0.034) / 2; // Convert to cm
 Serial.print("Food Distance: ");
 Serial.println(distance);
 return distance;
}
 float getWaterDistance() {
 digitalWrite(TRIG_PIN_WATER, LOW);
 delayMicroseconds(2);
 digitalWrite(TRIG_PIN_WATER, HIGH);
 delayMicroseconds(10);
 digitalWrite(TRIG_PIN_WATER, LOW);
 long duration = pulseIn(ECHO_PIN_WATER, HIGH);
 float distance = (duration * 0.034) / 2; // Convert to cm
 Serial.print("Water Distance: ");
 Serial.println(distance);
return distance;
}
